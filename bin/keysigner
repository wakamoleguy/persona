#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// I sign keys.  That's what I do.

require('../lib/baseExceptions').addExceptionHandler();

const
path = require('path'),
express = require('express'),
bodyParser = require('body-parser'),
_ = require('underscore'),
config = require('../lib/configuration.js'),
httputils = require('../lib/httputils.js'),
validate = require('../lib/validate.js'),
logger = require('../lib/logging/logging.js').logger,
heartbeat = require('../lib/heartbeat'),
shutdown = require('../lib/shutdown'),
computecluster = require('compute-cluster'),
urlparse = require('urlparse'),
certKey = require('../lib/wsapi/cert_key.js'),
statsd = require('../lib/logging/middleware/statsd.js'),
morgan = require('../lib/logging/custom_logger');

logger.info("keysigner starting up");

if (config.get('env') === 'production') {
  logger.info('node.js version: ' + process.version + ' at ' + process.execPath);
  logger.info('configuration: ', JSON.stringify(JSON.parse(config.toString())));
}

const HOSTNAME = urlparse(config.get('public_url')).host;
logger.info("Certs will be issued from: " + HOSTNAME);

// create an express server
var app = express();

// respond to health checks (before logging)
heartbeat.setup(app);

// our server will log
app.use(morgan(config.get('express_log_format'), {
  stream: {
    write: function(x) {
      logger.info(typeof x === 'string' ? x.trim() : x);
    }
  }
}));

app.use(statsd());

// parse POST bodies
app.use(bodyParser.json());

try {
  // explicitly relay VAR_PATH to children
  process.env['VAR_PATH'] = config.get('var_path');

  // allocate a compute cluster
  var cc = new computecluster({
    module: path.join(__dirname, "..", "lib", "keysigner", "keysigner-compute.js"),
    max_processes: config.get('max_compute_processes')
  }).on('error', function(e) {
    logger.error("error detected in keysigning computation process!  fatal: " + e.toString());
    setTimeout(function() { process.exit(1); }, 0);
  }).on('info', function(msg) {
    logger.info("(compute cluster): " + msg);
  }).on('debug', function(msg) {
    logger.debug("(compute cluster): " + msg);
  });
} catch(e) {
  process.stderr.write("can't allocate compute cluster: " + e + "\n");
  process.exit(1);
}



// and our single function
app.post('/wsapi/cert_key', validate({ 'email': 'email', 'pubkey': 'pubkey', 'ephemeral': 'boolean', 'unverified': { type: 'boolean', required: false }, 'forceIssuer': {type: 'hostname', required: false}}), function(req, resp) {
  var startTime = new Date();
  var forceIssuer = req.params.forceIssuer;
  var opts = {};
  if (!! forceIssuer) {
    if (config.get('forcible_issuers').indexOf(forceIssuer) === -1) {
      logger.error("Invalid issuer [" + forceIssuer + "]");
      return httputils.badRequest(resp, "Invalid issuer, unable to issue certificate");
    }
    opts.forceIssuer = forceIssuer;
  }
  cc.enqueue(_.extend(opts, {
    pubkey: req.params.pubkey,
    email: req.params.email,    
    unverified: !!req.params.unverified,
    validityPeriod: (req.params.ephemeral ? config.get('ephemeral_session_duration_ms') : config.get('certificate_validity_ms')),
    hostname: HOSTNAME
  }), function (err, r) {
    var reqTime = new Date - startTime;
    logger.info('certification_time', reqTime);

    // consider "application" errors to be the same as harder errors
    if (!err && r && r.error) err = r.error;
    else if (!r || !r.success) err = "no certificate returned from child process";

    if (err) {
      logger.error("certification generation error: " + err);
      httputils.serverError(resp, "certification generation error");
    } else {
      resp.writeHead(200, {'Content-Type': 'text/plain'});
      resp.write(r.success);
      resp.end();
    }
  });
});


var bindTo = config.get('bind_to');
var httpServer = app.listen(bindTo.port, bindTo.host, function() {
  logger.info("running on http://" + httpServer.address().address + ":" + httpServer.address().port);
});

// shutdown nicely on signals
shutdown.handleTerminationSignals(httpServer, function() {
  cc.exit();
});

#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

require('../lib/baseExceptions').addExceptionHandler();

const fs = require('fs');
const http = require('http');
const path = require('path');
const url = require('url');

const express = require('express');
const hood = require('hood');
const urlparse = require('urlparse');
const wsapi = require('../lib/wsapi.js');

const assets = require('../lib/static_resources').all;
const db = require('../lib/db.js');
const config = require('../lib/configuration.js');
const heartbeat = require('../lib/heartbeat.js');
const logger = require('../lib/logging/logging.js').logger;
const primary = require('../lib/primary');
const proxySecure = require('../lib/proxy-secure');
const shutdown = require('../lib/shutdown');
const statsd = require('../lib/logging/middleware/statsd.js');
const morgan = require('../lib/logging/custom_logger');
const getRawBody = require('raw-body');

var app = express();

logger.info("dbwriter starting up");

if (config.get('env') === 'production') {
  logger.info('node.js version: ' + process.version + ' at ' + process.execPath);
  logger.info('configuration: ', JSON.stringify(JSON.parse(config.toString())));
}

// Setup health check / heartbeat middleware.
// This is in front of logging on purpose.  see issue #537
heartbeat.setup(app, function(cb) {
  // ping the database to verify we're really healthy.
  db.ping(function(e) {
    if (e) logger.error("database ping error: " + e);
    cb(!e);
  });
});

// logging!  all requests other than __heartbeat__ are logged
app.use(morgan(config.get('express_log_format'), {
  stream: {
    write: function(x) {
      logger.info(typeof x === 'string' ? x.trim() : x);
    }
  }
}));

// limit all content bodies to 10kb, at which point we'll forcefully
// close down the connection. 
app.use(function (req, res, next) {
  getRawBody(req, {limit: '10kb', encoding: 'utf-8'}, function (err, string) {
    if (err) return next(err);
    req.text = string;
    next();
  });
});
app.use(statsd());

// protect our head
app.use(proxySecure());
app.use(hood({
  csp: false, // CSP breaks FxOS, see bug #4144
  hsts: config.get('hsts'),
  xframe: config.get('x_frame_options')
}));

// verify all JSON responses are objects - prevents regression on issue #217
app.use(function(req, resp, next) {
  var realRespJSON = resp.json;
  resp.json = function(obj) {
    if (!obj || typeof obj !== 'object') {
      logger.error("INTERNAL ERROR!  *all* json responses must be objects");
      throw "internal error";
    }
    realRespJSON.call(resp, obj);
  };
  return next();
});

// handle /wsapi requests
wsapi.setup({
  only_write_apis: true
}, app);

function doShutdown(readyForShutdownCB) {
  require('../lib/bcrypt.js').shutdown();
  db.close(readyForShutdownCB);
}

// open the databse
db.open(config.get('database'), function (error) {
  if (error) {
    logger.error("can't open database: " + error);
    // let async logging flush, then exit 1
    return process.nextTick(function() { process.exit(1); });
  }

  // As we detect primaries are online in the browserid process,
  // we must record this.  This allows us to handle cases where
  // IdP's transition online or off.
  primary.events.on('idp_seen', function(domain) {
    db.updateIDPLastSeen(domain, function(err) {
      if (err) {
        logger.error("error writing successful fetch of .well-known for "
                     + domain + " to database: " + err.toString());
      }
    });
  });

  var bindTo = config.get('bind_to');
  var httpServer = app.listen(bindTo.port, bindTo.host, function() {
    logger.info("running on http://" + httpServer.address().address + ":" + httpServer.address().port);
  });

  // shut down express gracefully on SIGINT
  shutdown.handleTerminationSignals(httpServer, doShutdown);
});
